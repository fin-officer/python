---
# Playbook to test MCP functionality for the Email LLM Processor application
- name: Test MCP Integration
  hosts: localhost
  gather_facts: yes
  vars:
    api_base_url: "http://localhost:8000"
    mcp_email_url: "http://localhost:8001/mcp/email"
    mcp_spam_url: "http://localhost:8002/mcp/spam"
    mcp_attachment_url: "http://localhost:8003/mcp/attachments"
    test_email: "user@example.com"
  
  tasks:
    - name: Check if main application is running
      uri:
        url: "{{ api_base_url }}/health"
        method: GET
        status_code: 200
      register: health_check
      ignore_errors: yes

    - name: Display health check result
      debug:
        var: health_check

    - name: Check if MCP Email Processor is running
      uri:
        url: "{{ mcp_email_url }}/resources"
        method: GET
        headers:
          Accept: "text/event-stream"
        status_code: 200
      register: mcp_email_health
      ignore_errors: yes

    - name: Check if MCP Spam Detector is running
      uri:
        url: "{{ mcp_spam_url }}/resources"
        method: GET
        headers:
          Accept: "text/event-stream"
        status_code: 200
      register: mcp_spam_health
      ignore_errors: yes

    - name: Check if MCP Attachment Processor is running
      uri:
        url: "{{ mcp_attachment_url }}/resources"
        method: GET
        headers:
          Accept: "text/event-stream"
        status_code: 200
      register: mcp_attachment_health
      ignore_errors: yes

    - name: Display MCP services health status
      debug:
        msg: |
          MCP Services Health Status:
          - Main Application: {{ 'RUNNING' if health_check.status == 200 else 'NOT RUNNING' }}
          - Email Processor: {{ 'RUNNING' if mcp_email_health.status == 200 else 'NOT RUNNING' }}
          - Spam Detector: {{ 'RUNNING' if mcp_spam_health.status == 200 else 'NOT RUNNING' }}
          - Attachment Processor: {{ 'RUNNING' if mcp_attachment_health.status == 200 else 'NOT RUNNING' }}

    - name: Fail if main application is not running
      fail:
        msg: "Main application is not running. Please start the application before running tests."
      when: health_check.status != 200
      
    - name: Test MCP Auto-Reply Functionality
      block:
        - name: Send test email for auto-reply
          uri:
            url: "{{ api_base_url }}/api/emails/process-mcp"
            method: POST
            body_format: json
            body:
              sender: "John Doe"
              sender_email: "john.doe@example.com"
              subject: "Question about services"
              content: "Hello, I'm interested in your financial services. Could you provide more information about your accounting packages?"
              attachment_ids: []
            status_code: 200
          register: auto_reply_result
          ignore_errors: yes

        - name: Display auto-reply result
          debug:
            var: auto_reply_result

        - name: Verify auto-reply contains company name
          assert:
            that:
              - "'Fin Officer' in auto_reply_result.json.reply"
            fail_msg: "Auto-reply does not contain company name"
            success_msg: "Auto-reply contains company name as expected"
          when: auto_reply_result.status == 200
      tags: [mcp_auto_reply]

    - name: Test MCP Resources
      block:
        - name: List available MCP resources
          uri:
            url: "{{ api_base_url }}/api/mcp/resources"
            method: GET
            status_code: 200
          register: resources_result
          ignore_errors: yes

        - name: Display resources result
          debug:
            var: resources_result

        - name: Verify resources list is not empty
          assert:
            that:
              - "resources_result.json.resources | length > 0"
            fail_msg: "No MCP resources found"
            success_msg: "MCP resources retrieved successfully"
          when: resources_result.status == 200
      tags: [mcp_resources]

    - name: Test MCP Tools
      block:
        - name: List available MCP tools
          uri:
            url: "{{ api_base_url }}/api/mcp/tools"
            method: GET
            status_code: 200
          register: tools_result
          ignore_errors: yes

        - name: Display tools result
          debug:
            var: tools_result

        - name: Verify tools list is not empty
          assert:
            that:
              - "tools_result.json.tools | length > 0"
            fail_msg: "No MCP tools found"
            success_msg: "MCP tools retrieved successfully"
          when: tools_result.status == 200
      tags: [mcp_tools]

    - name: Test Email Reply Prompt
      block:
        - name: Get email reply prompt
          uri:
            url: "{{ api_base_url }}/api/prompts/email-reply"
            method: GET
            params:
              email_content: "Hello, I have a question about my invoice."
              sender_name: "Jane Smith"
            status_code: 200
          register: prompt_result
          ignore_errors: yes

        - name: Display prompt result
          debug:
            var: prompt_result

        - name: Verify prompt contains sender name
          assert:
            that:
              - "'Jane Smith' in prompt_result.json.prompt | string"
            fail_msg: "Prompt does not contain sender name"
            success_msg: "Prompt contains sender name as expected"
          when: prompt_result.status == 200
      tags: [mcp_prompt]

    - name: Test MCP Spam Detection
      block:
        - name: Test spam detection with legitimate email
          uri:
            url: "{{ mcp_spam_url }}/tools/detect_spam"
            method: POST
            headers:
              Accept: "text/event-stream"
              Content-Type: "application/json"
            body_format: json
            body:
              jsonrpc: "2.0"
              id: "test-spam-legitimate"
              method: "detect_spam"
              params:
                sender_email: "john.doe@finofficer.com"
                subject: "Meeting request"
                content: "Hello, I would like to schedule a meeting to discuss your services."
            status_code: 200
          register: spam_result_legitimate
          ignore_errors: yes

        - name: Test spam detection with suspicious email
          uri:
            url: "{{ mcp_spam_url }}/tools/detect_spam"
            method: POST
            headers:
              Accept: "text/event-stream"
              Content-Type: "application/json"
            body_format: json
            body:
              jsonrpc: "2.0"
              id: "test-spam-suspicious"
              method: "detect_spam"
              params:
                sender_email: "unknown@suspicious-domain.xyz"
                subject: "URGENT: Your account needs verification"
                content: "CLICK HERE to verify your account or it will be suspended! http://suspicious-link.xyz"
            status_code: 200
          register: spam_result_suspicious
          ignore_errors: yes

        - name: Display spam detection results
          debug:
            msg: |
              Spam Detection Results:
              - Legitimate Email: {{ spam_result_legitimate.json.is_spam | default('N/A') }}
              - Suspicious Email: {{ spam_result_suspicious.json.is_spam | default('N/A') }}

        - name: Verify spam detection works correctly
          assert:
            that:
              - "not spam_result_legitimate.json.is_spam"
              - "spam_result_suspicious.json.is_spam"
            fail_msg: "Spam detection is not working as expected"
            success_msg: "Spam detection is working correctly"
          when: spam_result_legitimate.status == 200 and spam_result_suspicious.status == 200
      tags: [mcp_spam_detection]

    - name: Test MCP Attachment Processing
      block:
        - name: Test attachment size validation
          uri:
            url: "{{ mcp_attachment_url }}/tools/validate_attachment"
            method: POST
            headers:
              Accept: "text/event-stream"
              Content-Type: "application/json"
            body_format: json
            body:
              jsonrpc: "2.0"
              id: "test-attachment-size"
              method: "validate_attachment"
              params:
                filename: "test_document.pdf"
                file_size: 5242880  # 5MB
                content_type: "application/pdf"
            status_code: 200
          register: attachment_size_result
          ignore_errors: yes

        - name: Test attachment type validation (allowed)
          uri:
            url: "{{ mcp_attachment_url }}/tools/validate_attachment"
            method: POST
            headers:
              Accept: "text/event-stream"
              Content-Type: "application/json"
            body_format: json
            body:
              jsonrpc: "2.0"
              id: "test-attachment-type-allowed"
              method: "validate_attachment"
              params:
                filename: "test_document.pdf"
                file_size: 1048576  # 1MB
                content_type: "application/pdf"
            status_code: 200
          register: attachment_type_allowed_result
          ignore_errors: yes

        - name: Test attachment type validation (blocked)
          uri:
            url: "{{ mcp_attachment_url }}/tools/validate_attachment"
            method: POST
            headers:
              Accept: "text/event-stream"
              Content-Type: "application/json"
            body_format: json
            body:
              jsonrpc: "2.0"
              id: "test-attachment-type-blocked"
              method: "validate_attachment"
              params:
                filename: "suspicious.exe"
                file_size: 1048576  # 1MB
                content_type: "application/x-msdownload"
            status_code: 200
          register: attachment_type_blocked_result
          ignore_errors: yes

        - name: Display attachment validation results
          debug:
            msg: |
              Attachment Validation Results:
              - Size Validation: {{ attachment_size_result.json.is_valid | default('N/A') }}
              - Type Validation (Allowed): {{ attachment_type_allowed_result.json.is_valid | default('N/A') }}
              - Type Validation (Blocked): {{ attachment_type_blocked_result.json.is_valid | default('N/A') }}

        - name: Verify attachment validation works correctly
          assert:
            that:
              - "attachment_size_result.json.is_valid"
              - "attachment_type_allowed_result.json.is_valid"
              - "not attachment_type_blocked_result.json.is_valid"
            fail_msg: "Attachment validation is not working as expected"
            success_msg: "Attachment validation is working correctly"
          when: attachment_size_result.status == 200 and attachment_type_allowed_result.status == 200 and attachment_type_blocked_result.status == 200
      tags: [mcp_attachment_processing]

    - name: Test MCP Email Analysis
      block:
        - name: Test email analysis
          uri:
            url: "{{ mcp_email_url }}/tools/analyze_email"
            method: POST
            headers:
              Accept: "text/event-stream"
              Content-Type: "application/json"
            body_format: json
            body:
              jsonrpc: "2.0"
              id: "test-email-analysis"
              method: "analyze_email"
              params:
                email_content: "Hello, I'm interested in your accounting services. Could you send me information about your pricing and packages? I need help with my company's tax filing."
                subject: "Inquiry about accounting services"
                sender_name: "Jane Smith"
                sender_email: "jane.smith@example.com"
                has_attachments: false
            status_code: 200
          register: email_analysis_result
          ignore_errors: yes

        - name: Display email analysis results
          debug:
            var: email_analysis_result

        - name: Verify email analysis contains required fields
          assert:
            that:
              - "'tone' in email_analysis_result.json"
              - "'urgency' in email_analysis_result.json"
              - "'category' in email_analysis_result.json"
              - "'sentiment' in email_analysis_result.json"
            fail_msg: "Email analysis is missing required fields"
            success_msg: "Email analysis contains all required fields"
          when: email_analysis_result.status == 200
      tags: [mcp_email_analysis]

    - name: Test MCP Auto-Reply Generation
      block:
        - name: Test auto-reply generation
          uri:
            url: "{{ mcp_email_url }}/tools/generate_auto_reply"
            method: POST
            headers:
              Accept: "text/event-stream"
              Content-Type: "application/json"
            body_format: json
            body:
              jsonrpc: "2.0"
              id: "test-auto-reply"
              method: "generate_auto_reply"
              params:
                email_content: "Hello, I'm interested in your accounting services. Could you send me information about your pricing and packages? I need help with my company's tax filing."
                subject: "Inquiry about accounting services"
                sender_name: "Jane Smith"
                sender_email: "jane.smith@example.com"
            status_code: 200
          register: auto_reply_generation_result
          ignore_errors: yes

        - name: Display auto-reply generation results
          debug:
            var: auto_reply_generation_result

        - name: Verify auto-reply generation contains required fields
          assert:
            that:
              - "'reply_content' in auto_reply_generation_result.json"
              - "'should_send' in auto_reply_generation_result.json"
              - "'template_used' in auto_reply_generation_result.json"
              - "auto_reply_generation_result.json.reply_content | length > 0"
            fail_msg: "Auto-reply generation is missing required fields or content"
            success_msg: "Auto-reply generation contains all required fields and content"
          when: auto_reply_generation_result.status == 200
      tags: [mcp_auto_reply_generation]

    - name: Summary of MCP test results
      debug:
        msg: |
          MCP Integration Test Results:
          - Auto-Reply Functionality: {{ 'PASSED' if auto_reply_result.json is defined else 'FAILED' }}
          - MCP Resources: {{ 'PASSED' if resources_result.json is defined else 'FAILED' }}
          - MCP Tools: {{ 'PASSED' if tools_result.json is defined else 'FAILED' }}
          - Email Reply Prompt: {{ 'PASSED' if prompt_result.json is defined else 'FAILED' }}
          - Spam Detection: {{ 'PASSED' if spam_result_legitimate.json is defined and spam_result_suspicious.json is defined else 'FAILED' }}
          - Attachment Processing: {{ 'PASSED' if attachment_size_result.json is defined and attachment_type_allowed_result.json is defined and attachment_type_blocked_result.json is defined else 'FAILED' }}
          - Email Analysis: {{ 'PASSED' if email_analysis_result.json is defined else 'FAILED' }}
          - Auto-Reply Generation: {{ 'PASSED' if auto_reply_generation_result.json is defined else 'FAILED' }}
